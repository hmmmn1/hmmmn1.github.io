precision mediump float;
// From vertex shader
// varying vec2 UV;
varying vec3 Position_worldspace;
varying vec3 Normal_cameraspace;
varying vec3 EyeDirection_cameraspace;
varying vec3 LightDirection_cameraspace;
uniform vec3 LightPosition_worldspace;

//
//uniform sampler2D myTextureSampler;

void main()
{
	// todo
	vec3 Ambience = vec3(0.1,0.1,0.1);
	// light diffuse and light specular
	vec3 LightColor = vec3(1,1,1);
	float LightPower = 50.0;
	// material properties
	vec3 MaterialSpecularColor = vec3(0.0,0.0,0.0);
	vec3 MaterialDiffuseColor = vec3(0.0,1.0,0.0);
	vec3 MaterialAmbientColor = Ambience * MaterialDiffuseColor;
	// length
	float distance = length( LightPosition_worldspace - Position_worldspace );
	// normalize
	vec3 n = normalize( Normal_cameraspace );
	vec3 l = normalize( LightDirection_cameraspace );
	// cos between light and surface
	float cosTheta = abs( dot( n,l ));

	// eye vector
	vec3 E = normalize(EyeDirection_cameraspace);
	// Direction in which the triangle reflects the light
	vec3 R = reflect(-l,n);
	// cos of reflection
	float cosAlpha = clamp(dot(E,R),0.0,1.0);

	gl_FragColor.rgb = MaterialAmbientColor + 
		MaterialDiffuseColor * LightColor * LightPower * cosTheta / (distance * distance) +
		MaterialDiffuseColor * LightColor * LightPower * pow(cosAlpha,8.) / (distance * distance);
}

// input
attribute vec3 vPosition_m;
//attribute vec2 vertexUV;
attribute vec3 vNormal_m;
// constants
uniform mat4 vMVP;
uniform mat4 M;
uniform mat4 V;
uniform vec3 LightPosition_worldspace2;
// output
//varying vec2 UV;
varying vec3 Position_worldspace;
varying vec3 Normal_cameraspace;
varying vec3 EyeDirection_cameraspace;
varying vec3 LightDirection_cameraspace;

void main()
{
	gl_Position = vMVP * vec4(vPosition_m,1);
//	UV = vertexUV;

	Position_worldspace = (M * vec4(vPosition_m,1)).xyz;
	Normal_cameraspace = ( V * M * vec4(vNormal_m,0)).xyz; // Only correct if ModelMatrix does not scale the model ! Use its inverse transpose if not.
	EyeDirection_cameraspace = vec3(0,0,0) - ( V * M * vec4(vPosition_m,1)).xyz;
	vec3 LightPosition_cameraspace = ( V * vec4(LightPosition_worldspace2,1)).xyz;
	LightDirection_cameraspace = LightPosition_cameraspace + EyeDirection_cameraspace;
}

# Blender3D v249 OBJ File: untitled.blend
# www.blender3d.org
mtllib cube.mtl
v 1.000000 -1.000000 -1.000000
v 1.000000 -1.000000 1.000000
v -1.000000 -1.000000 1.000000
v -1.000000 -1.000000 -1.000000
v 1.000000 1.000000 -1.000000
v 0.999999 1.000000 1.000001
v -1.000000 1.000000 1.000000
v -1.000000 1.000000 -1.000000
vt 0.748573 0.750412
vt 0.749279 0.501284
vt 0.999110 0.501077
vt 0.999455 0.750380
vt 0.250471 0.500702
vt 0.249682 0.749677
vt 0.001085 0.750380
vt 0.001517 0.499994
vt 0.499422 0.500239
vt 0.500149 0.750166
vt 0.748355 0.998230
vt 0.500193 0.998728
vt 0.498993 0.250415
vt 0.748953 0.250920
vn 0.000000 0.000000 -1.000000
vn -1.000000 -0.000000 -0.000000
vn -0.000000 -0.000000 1.000000
vn -0.000001 0.000000 1.000000
vn 1.000000 -0.000000 0.000000
vn 1.000000 0.000000 0.000001
vn 0.000000 1.000000 -0.000000
vn -0.000000 -1.000000 0.000000
usemtl Material_ray.png
s off
f 5/1/1 1/2/1 4/3/1
f 5/1/1 4/3/1 8/4/1
f 3/5/2 7/6/2 8/7/2
f 3/5/2 8/7/2 4/8/2
f 2/9/3 6/10/3 3/5/3
f 6/10/4 7/6/4 3/5/4
f 1/2/5 5/1/5 2/9/5
f 5/1/6 6/10/6 2/9/6
f 5/1/7 8/11/7 6/10/7
f 8/11/7 7/12/7 6/10/7
f 1/2/8 2/9/8 3/13/8
f 1/2/8 3/13/8 4/14/8
